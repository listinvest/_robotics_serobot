#!python
import asyncio as aio
from pathlib import Path
from argparse import ArgumentParser, RawTextHelpFormatter
from configparser import ConfigParser

from truhanen.serobot.web.serobot_server import SerobotServer


def parse_arguments():
    argument_parser = ArgumentParser(formatter_class=RawTextHelpFormatter)

    argument_parser.add_argument(
        'config_file', nargs='?', type=Path,
        help='A configuration file that lists the other arguments.\n'
             'See README.md for details.')
    argument_parser.add_argument(
        '-a', '--auth-file', type=Path,
        help='A file that lists the authorized users and passwords.\n'
             'See README.md for details.')
    argument_parser.add_argument(
        '-c', '--ssl-certfile', type=Path,
        help='Path to a SSL certificate file for HTTPS, .pem')
    argument_parser.add_argument(
        '-k', '--ssl-keyfile', type=Path,
        help='Path to a SSL key file for HTTPS, .pem')

    arguments, _ = argument_parser.parse_known_args()
    arguments = vars(arguments)

    # Update the values in arguments with the contents
    # of a config file, if given.
    config_path = arguments.pop('config_file')
    if config_path is not None:
        config = ConfigParser()
        config.read(config_path)
        # At the moment all variables in the .conf file are path-like,
        # so convert them blindly to Path objects.
        arguments.update({
            name: Path(value) for (name, value) in config.items('config')})

    return arguments


if __name__ == '__main__':
    server = SerobotServer(**parse_arguments())
    aio.run(server.start())
